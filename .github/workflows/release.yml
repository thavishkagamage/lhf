name: LHF/pyLHF release

on:
  release:
    branches:
      - master
  push:
    branches:
      - sharedLHF

jobs:
  build:

    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
        exclude:
          - os: windows-latest
    
    steps:
    # Get dependencies
    
    - name: Linux Apt update (${{ matrix.os }} , ${{ matrix.mpi }})
      if:   contains(matrix.os,'ubuntu')
      run:  sudo apt-get update
    
    - name: Get Linux OpenMPI dependencies (${{ matrix.os }})
      if:   contains(matrix.os,'ubuntu')
      run:  sudo apt-get install -y openmpi-bin openmpi-common libopenmpi-dev
      
    - name: Get dependencies (${{ matrix.os }})
      if:   contains(matrix.os,'macos')
      run:  brew install openmpi libomp
               
    - name: Get dependencies (${{ matrix.os }})
      if:   contains(matrix.os,'windows-latest')
      run:  wget https://download.open-mpi.org/release/open-mpi/v4.0/openmpi-4.0.2.tar.gz
      
    - name: Windows extract-openmpi 
      if:   contains(matrix.os,'windows-latest')
      run:  tar -xvf ./openmpi-4.0.2.tar.gz
      
    - name: Windows configure-openmpi
      if:   contains(matrix.os,'windows-latest')
      run:  ./openmpi-4.0.2/configure --prefix="/home/${USER}/.openmpi"
      
    - name: Windows install-openmpi
      if:  contains(matrix.os,'windows-latest')
      run: |
          make -j
          sudo make install
          
          
    # Checkout v2 : https://github.com/actions/checkout
    - uses: actions/checkout@v2
      
    # Check CMake Version 
    - name: Check CMake (${{ matrix.mpi }})
      run: cmake --version
      
    # Make the project
    - name: cmake
      run: cmake . && make
  
    # Run cmake tests
    - name: ctest
      run: make test

    - name: Set up Python
      uses: actions/setup-python@v1
      with:
        python-version: 3.8
        
    - name: Install dependencies
      run: pip install --upgrade pip && pip install numpy twine

    - name: Copy shared object to python source
      if: contains(matrix.os,'ubuntu')
      run: cp LHFmain/libLHFlib.so pyLHF/src/LHF
  
    - name: Copy shared object to python source
      if: contains(matrix.os,'macos')
      run: cp LHFmain/libLHFlib.dylib pyLHF/src/LHF/libLHFlib.so
  
    - name: Copy shared object to python source
      if: contains(matrix.os,'windows')
      run: copy LHFmain/libLHFlib.dll pyLHF/src/LHF/libLHFlib.so
  
    - name: Copy README.md
      run: cp README.md pyLHF/src/
  
    - name: Build wheels
      uses: pypa/cibuildwheel@v1.11.1.post1
      with:
        package-dir: pyLHF/src
        output-dir: pyLHF/src/wheelhouse
      env:
        CIBW_PROJECT_REQUIRES_PYTHON: ">=3.6"
        CIBW_REPAIR_WHEEL_COMMAND: ""
        CIBW_ARCHS_LINUX: x86_64
        CIBW_ARCHS_MACOS: x86_64 arm64
        CIBW_BUILD: cp39-*
#     - name: Build manylinux Python wheels
#       if:   runner.os == 'Linux'
#       uses: RalfG/python-wheels-manylinux-build@v0.3.3-manylinux2010_x86_64
#       with:
#         python-versions: 'cp36-cp36m cp37-cp37m'
#         build-requirements: 'cython numpy'
#         system-packages: 'lrzip-devel zlib-devel'
#         pre-build-command: ''
#         package-path: 'pyLHF/src'
#         pip-wheel-args: '-w ./dist --no-deps --use-feature=in-tree-build'

    - name: Check source files
      run:  ls pyLHF/src/wheelhouse/
        
    - name: Publish wheels to PyPI
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: | 
        twine upload pyLHF/src/wheelhouse/*
